{"version":3,"sources":["../../src/app/component/nav/nav.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAuE;AAqBvE;;;;;;GAMG;AAeH,IAAa,iBAAiB;IAd9B;QAkBU,aAAQ,GAA0B,IAAI,mBAAY,EAAE,CAAC;IAY/D,CAAC;IAVS,oCAAQ,GAAhB,UAAiB,UAAmB;QAApC,iBASC;QARC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IACH,wBAAC;AAAD,CAhBA,AAgBC,IAAA;AAdC;IADC,YAAK,EAAE;8BACO,KAAK;gDAAU;AAE9B;IADC,aAAM,CAAC,WAAW,CAAC;8BACF,mBAAY;mDAA+B;AAJlD,iBAAiB;IAd7B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,UAAU;SACpB;QACD,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE,iTAOT;KACF,CAAC;GACW,iBAAiB,CAgB7B;AAhBY,8CAAiB;AAkB9B;;;;;;GAMG;AAqBH,IAAa,iBAAiB;IApB9B;QAwBU,aAAQ,GAA0B,IAAI,mBAAY,EAAE,CAAC;IAY/D,CAAC;IAVS,oCAAQ,GAAhB,UAAiB,UAAmB;QAApC,iBASC;QARC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IACH,wBAAC;AAAD,CAhBA,AAgBC,IAAA;AAdC;IADC,YAAK,EAAE;8BACO,KAAK;gDAAU;AAE9B;IADC,aAAM,CAAC,WAAW,CAAC;8BACF,mBAAY;mDAA+B;AAJlD,iBAAiB;IApB7B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,UAAU;SACpB;QACD,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE,2hCAaT;KACF,CAAC;GACW,iBAAiB,CAgB7B;AAhBY,8CAAiB","file":"nav.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BadgeColorType } from \"../layout/badge.component\";\n\n/**\n * Tab 菜单项定义\n * @property {string}          TabMenu.label      - 标签\n * @property {string}          TabMenu.value      - 显示值\n * @property {boolean}         TabMenu.active     - 是否显示为活动\n * @property {string}          TabMenu.imageUrl   - 标签图片URL (optional)\n * @property {string}          TabMenu.badgeLabel - 标签徽章内容 (optional)\n * @property {BadgeColorType}  TabMenu.badgeColor - 标签徽章背景色 (optional)\n */\nexport interface TabMenu {\n  label: string;\n  value: string;\n  active: boolean;\n  imageUrl?: string;\n  badgeLabel?: string;\n  badgeColor?: BadgeColorType;\n}\n\n/**\n * WeUI 顶部导航标签组件\n * @class                            WxNavbarComponent\n * @property {Array<TabMenu>}        WxNavbarComponent.menus     - 输入参数: 选项定义对象数组\n * @property {EventEmitter<TabMenu>} WxNavbarComponent.onSelect  - 输出参数: 确认选择\n * @event                            WxNavbarComponent#on-select\n */\n@Component({\n  host: {\n    \"class\": \"weui-tab\",\n  },\n  selector: \"div[wx-navbar]\",\n  template: `\n    <div class=\"weui-navbar\">\n      <div class=\"weui-navbar__item\" style=\"cursor: pointer;\" *ngFor=\"let menu of menus\" [ngClass]=\"{'weui-bar__item_on': menu.active}\" (click)=\"doSwitch(menu)\">\n        {{menu.label}}\n      </div>\n    </div>\n    <div class=\"weui-tab__panel\"></div>\n  `,\n})\nexport class WxNavbarComponent {\n  @Input()\n  private menus: Array<TabMenu>;\n  @Output(\"on-select\")\n  private onSelect: EventEmitter<TabMenu> = new EventEmitter();\n\n  private doSwitch(selectMenu: TabMenu): void {\n    this.menus.forEach((menu, index) => {\n      if (menu.value === selectMenu.value) {\n        this.menus[index].active = true;\n      } else {\n        this.menus[index].active = false;\n      }\n    });\n    this.onSelect.emit(selectMenu);\n  }\n}\n\n/**\n * WeUI 底部导航标签组件\n * @class                            WxTabbarComponent\n * @property {Array<TabMenu>}        WxTabbarComponent.menus     - 输入参数: 选项定义对象数组\n * @property {EventEmitter<TabMenu>} WxTabbarComponent.onSelect  - 输出参数: 确认选择\n * @event                            WxTabbarComponent#on-select\n */\n@Component({\n  host: {\n    \"class\": \"weui-tab\",\n  },\n  selector: \"div[wx-tabbar]\",\n  template: `\n    <div class=\"weui-tab__panel\"></div>\n    <div class=\"weui-tabbar\">\n      <div class=\"weui-tabbar__item\" style=\"cursor: pointer;\" *ngFor=\"let menu of menus\" [ngClass]=\"{'weui-bar__item_on': menu.active}\" (click)=\"doSwitch(menu)\">\n        <span *ngIf=\"menu.badgeLabel || menu.badgeColor\" style=\"display: inline-block;position: relative;\">\n          <img [src]=\"menu.imageUrl\" alt=\"\" class=\"weui-tabbar__icon\">\n          <span wx-badge *ngIf=\"menu.badgeLabel && menu.badgeLabel.trim().length > 0\" [color]=\"menu.badgeColor\" style=\"position: absolute;top: -2px;right: -17px;\">{{menu.badgeLabel}}</span>\n          <span wx-badge-dot *ngIf=\"!menu.badgeLabel || menu.badgeLabel.trim().length === 0\" [color]=\"menu.badgeColor\" style=\"position: absolute;top: 0;right: -10px;\"></span>\n        </span>\n        <img [src]=\"menu.imageUrl\" *ngIf=\"!menu.badgeLabel && !menu.badgeColor\" alt=\"\" class=\"weui-tabbar__icon\">\n        <p class=\"weui-tabbar__label\">{{menu.label}}</p>\n      </div>\n    </div>\n  `,\n})\nexport class WxTabbarComponent {\n  @Input()\n  private menus: Array<TabMenu>;\n  @Output(\"on-select\")\n  private onSelect: EventEmitter<TabMenu> = new EventEmitter();\n\n  private doSwitch(selectMenu: TabMenu): void {\n    this.menus.forEach((menu, index) => {\n      if (menu.value === selectMenu.value) {\n        this.menus[index].active = true;\n      } else {\n        this.menus[index].active = false;\n      }\n    });\n    this.onSelect.emit(selectMenu);\n  }\n}\n"]}