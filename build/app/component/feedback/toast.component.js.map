{"version":3,"sources":["../../src/app/component/feedback/toast.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA+F;AAE/F;;;;;;;GAOG;AAWH,IAAa,gBAAgB;IAV7B;QAYU,WAAM,GAAW,MAAM,CAAC;QAIxB,gBAAW,GAAW,IAAI,CAAC;QAE3B,YAAO,GAAY,KAAK,CAAC;QAEzB,kBAAa,GAA0B,IAAI,mBAAY,EAAE,CAAC;IAapE,CAAC;IAXQ,sCAAW,GAAlB;QAAA,iBAUC;QATC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;YACtB,UAAU,CAAC;gBACT,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;YACxC,CAAC,EAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC;IACH,CAAC;IACH,uBAAC;AAAD,CAvBA,AAuBC,IAAA;AArBC;IADC,kBAAW,CAAC,eAAe,CAAC;;gDACG;AAEhC;IADC,YAAK,EAAE;;iDACgB;AAExB;IADC,YAAK,CAAC,cAAc,CAAC;;qDACa;AAEnC;IADC,YAAK,EAAE;;iDACyB;AAEjC;IADC,aAAM,EAAE;8BACc,mBAAY;uDAA+B;AAVvD,gBAAgB;IAV5B,gBAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,QAAQ,EAAE,iNAMT;KACF,CAAC;GACW,gBAAgB,CAuB5B;AAvBY,4CAAgB","file":"toast.component.js","sourcesContent":["import { Component, Input, Output, HostBinding, EventEmitter, OnChanges } from \"@angular/core\";\n\n/**\n * WeUI 面包框组件\n * @class                            WxToastMsgComponent\n * @property {string}                WxToastMsgComponent.message     - 输入参数: 消息内容\n * @property {number}                WxToastMsgComponent.showSeconds - 输入参数: 持续时长(秒)\n * @property {boolean}               WxToastMsgComponent.display     - 输入输出参数: 是否显示\n * @event                            WxToastMsgComponent#display\n */\n@Component({\n  selector: \"div[wx-toast]\",\n  template: `\n    <div class=\"weui-mask_transparent\"></div>\n    <div class=\"weui-toast\">\n      <ng-content select=\"[wx-icon]\"></ng-content>\n      <p class=\"weui-toast__content\">{{message}}</p>\n    </div>\n  `,\n})\nexport class WxToastComponent implements OnChanges {\n  @HostBinding(\"style.display\")\n  private styles: string = \"none\";\n  @Input()\n  private message: string;\n  @Input(\"show-seconds\")\n  private showSeconds: number = 9999;\n  @Input()\n  private display: boolean = false;\n  @Output()\n  private displayChange: EventEmitter<boolean> = new EventEmitter();\n\n  public ngOnChanges(): void {\n    if (this.display) {\n      this.styles = \"block\";\n      setTimeout(() => {\n        this.display = false;\n        this.displayChange.emit(this.display);\n      }, this.showSeconds * 1200);\n    } else {\n      this.styles = \"none\";\n    }\n  }\n}\n"]}