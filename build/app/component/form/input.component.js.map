{"version":3,"sources":["../../src/app/component/form/input.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA+F;AAC/F,wCAAyE;AAyDzE;;;;;GAKG;AAqBH,IAAa,gBAAgB;IApB7B;QAuBU,eAAU,GAAW,EAAE,CAAC;QAgBxB,sBAAiB,GAAe,cAAQ,CAAC,CAAC;QAC1C,qBAAgB,GAAqB,cAAQ,CAAC,CAAC;IAYzD,CAAC;IA3BQ,qCAAU,GAAjB,UAAkB,GAAW;QAC3B,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,4CAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAKD,sBAAI,mCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;aAED,UAAU,GAAW;YACnB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAPA;IAAA,CAAC;IAQJ,uBAAC;AAAD,CAhCA,AAgCC,IAAA;AA9BC;IADC,YAAK,EAAE;;8CACgB;AAFb,gBAAgB;IApB5B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,6BAA6B;SACvC;QACD,SAAS,EAAE,CAAC;gBACV,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,yBAAiB,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,kBAAgB,EAAhB,CAAgB,CAAC;aACzF,CAAC;QACF,QAAQ,EAAE,eAAe;QACzB,QAAQ,EAAE,kdAUT;KACF,CAAC;GACW,gBAAgB,CAgC5B;AAhCY,4CAAgB;AAkC7B;;;;;GAKG;AAsBH,IAAa,mBAAmB;IAK9B,6BACU,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAHxB,eAAU,GAAW,EAAE,CAAC;QAgCxB,sBAAiB,GAAe,cAAQ,CAAC,CAAC;QAC1C,qBAAgB,GAAqB,cAAQ,CAAC,CAAC;IA7BnD,CAAC;IAEE,uCAAS,GAAhB;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QAChF,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gCAC7B,CAAC;YACR,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;gBACxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACjC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;gBAC3B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAND,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAG;oBAA9B,CAAC;SAMT;IACH,CAAC;IAEM,wCAAU,GAAjB,UAAkB,GAAW;QAC3B,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,8CAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,+CAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAKO,sCAAQ,GAAhB;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QAChF,IAAI,IAAI,GAAkB,EAAE,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE,CAAC;YACxC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAED,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;aAED,UAAU,GAAW;YACnB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAPA;IAAA,CAAC;IAQJ,0BAAC;AAAD,CA3DA,AA2DC,IAAA;AAzDC;IADC,YAAK,EAAE;;iDACgB;AAFb,mBAAmB;IArB/B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,gCAAgC;SAC1C;QACD,SAAS,EAAE,CAAC;gBACV,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,yBAAiB,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,qBAAmB,EAAnB,CAAmB,CAAC;aAC5F,CAAC;QACF,QAAQ,EAAE,kBAAkB;QAC5B,QAAQ,EAAE,mgBAWT;KACF,CAAC;qCAOsB,iBAAU;GANrB,mBAAmB,CA2D/B;AA3DY,kDAAmB;AA6DhC;;;;;GAKG;AAgBH,IAAa,iBAAiB;IAf9B;QAkBU,eAAU,GAAW,EAAE,CAAC;QAgBxB,sBAAiB,GAAe,cAAQ,CAAC,CAAC;QAC1C,qBAAgB,GAAqB,cAAQ,CAAC,CAAC;IAYzD,CAAC;IA3BQ,sCAAU,GAAjB,UAAkB,GAAW;QAC3B,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,6CAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAKD,sBAAI,oCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;aAED,UAAU,GAAW;YACnB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAPA;IAAA,CAAC;IAQJ,wBAAC;AAAD,CAhCA,AAgCC,IAAA;AA9BC;IADC,YAAK,EAAE;;+CACiB;AAFd,iBAAiB;IAf7B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,4BAA4B;SACtC;QACD,SAAS,EAAE,CAAC;gBACV,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,yBAAiB,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,mBAAiB,EAAjB,CAAiB,CAAC;aAC1F,CAAC;QACF,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE,2PAKT;KACF,CAAC;GACW,iBAAiB,CAgC7B;AAhCY,8CAAiB;AAkC9B;;;;;;GAMG;AAQH,IAAa,gBAAgB;IAA7B;IAOA,CAAC;IAAD,uBAAC;AAAD,CAPA,AAOC,IAAA;AAJC;IAFC,kBAAW,CAAC,WAAW,CAAC;IACxB,YAAK,EAAE;;8CACgB;AAGxB;IAFC,kBAAW,CAAC,kBAAkB,CAAC;IAC/B,YAAK,EAAE;;qDACoB;AANjB,gBAAgB;IAP5B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,YAAY;SACtB;QACD,QAAQ,EAAE,iBAAiB;QAC3B,QAAQ,EAAE,EAAE;KACb,CAAC;GACW,gBAAgB,CAO5B;AAPY,4CAAgB;AAS7B;;;;;;;;GAQG;AAoBH,IAAa,mBAAmB;IAnBhC;QAgCU,eAAU,GAAW,EAAE,CAAC;QACxB,WAAM,GAAY,KAAK,CAAC;QA0BxB,sBAAiB,GAAe,cAAQ,CAAC,CAAC;QAC1C,qBAAgB,GAAqB,cAAQ,CAAC,CAAC;IAYzD,CAAC;IArCQ,wCAAU,GAAjB,UAAkB,GAAW;QAC3B,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,8CAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,+CAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAEM,uCAAS,GAAhB;QACE,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACrD,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;QACpC,EAAE,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;IACH,CAAC;IAKD,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;aAED,UAAU,GAAW;YACnB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAPA;IAAA,CAAC;IAQJ,0BAAC;AAAD,CArDA,AAqDC,IAAA;AAlDC;IAFC,kBAAW,CAAC,WAAW,CAAC;IACxB,YAAK,EAAE;;iDACa;AAGrB;IAFC,kBAAW,CAAC,kBAAkB,CAAC;IAC/B,YAAK,EAAE;;wDACoB;AAG5B;IAFC,kBAAW,CAAC,WAAW,CAAC;IACxB,YAAK,EAAE;;iDACa;AAErB;IADC,YAAK,EAAE;;yDACqB;AAXlB,mBAAmB;IAnB/B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,4BAA4B;SACtC;QACD,SAAS,EAAE,CAAC;gBACV,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,yBAAiB,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,qBAAmB,EAAnB,CAAmB,CAAC;aAC5F,CAAC;QACF,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,2YAST;KACF,CAAC;GACW,mBAAmB,CAqD/B;AArDY,kDAAmB;AAuDhC;;;;;;GAMG;AAUH,IAAa,iBAAiB;IAA9B;IAMA,CAAC;IAAD,wBAAC;AAAD,CANA,AAMC,IAAA;AAHC;IAFC,kBAAW,CAAC,WAAW,CAAC;IACxB,YAAK,EAAE;;+CACa;AAErB;IADC,YAAK,EAAE;8BACS,KAAK;kDAAe;AAL1B,iBAAiB;IAT7B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,aAAa;SACvB;QACD,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,uGAET;KACF,CAAC;GACW,iBAAiB,CAM7B;AANY,8CAAiB;AAQ9B;;;;;;;;GAQG;AAgBH,IAAa,gBAAgB;IAf7B;QAyBU,eAAU,GAAW,EAAE,CAAC;QAgBxB,sBAAiB,GAAe,cAAQ,CAAC,CAAC;QAC1C,qBAAgB,GAAqB,cAAQ,CAAC,CAAC;IAYzD,CAAC;IA3BQ,qCAAU,GAAjB,UAAkB,GAAW;QAC3B,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,4CAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAKD,sBAAI,mCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;aAED,UAAU,GAAW;YACnB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAPA;IAAA,CAAC;IAQJ,uBAAC;AAAD,CAvCA,AAuCC,IAAA;AApCC;IAFC,kBAAW,CAAC,UAAU,CAAC;IACvB,YAAK,EAAE;;6CACY;AAEpB;IADC,YAAK,EAAE;;iDACgB;AAExB;IADC,YAAK,EAAE;;+CACc;AAEtB;IADC,YAAK,EAAE;;6CACY;AATT,gBAAgB;IAf5B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,YAAY;SACtB;QACD,SAAS,EAAE,CAAC;gBACV,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,yBAAiB,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,kBAAgB,EAAhB,CAAgB,CAAC;aACzF,CAAC;QACF,QAAQ,EAAE,iBAAiB;QAC3B,QAAQ,EAAE,8PAKT;KACF,CAAC;GACW,gBAAgB,CAuC5B;AAvCY,4CAAgB","file":"input.component.js","sourcesContent":["import { Component, Input, HostBinding, forwardRef, ElementRef, DoCheck } from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n/**\r\n * @typedef {string} 输入组件类型枚举\r\n */\r\nexport type InputType = \"text\" | \"password\" | \"color\" | \"date\" | \"datetime\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"range\" | \"search\" | \"tel\" | \"time\" | \"url\" | \"week\";\r\n\r\n/**\r\n * Radio & Checkbox 配置文件定义对象\r\n * @interface                     CheckItem\r\n * @property {string}             CheckItem.name    - 选项名称\r\n * @property {Array<CheckOption>} CheckItem.options - 可选选项对象数组\r\n */\r\nexport interface CheckItem {\r\n  name: string;\r\n  options: Array<CheckOption>;\r\n}\r\n\r\n/**\r\n * Radio & Checkbox 选项定义对象\r\n * @interface          CheckOption\r\n * @property {string}  CheckOption.id    - 选项ID(DOM下须唯一)\r\n * @property {string}  CheckOption.label - 选项显示标签\r\n * @property {string}  CheckOption.value - 选项值\r\n */\r\nexport interface CheckOption {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Switch 选项定义对象\r\n * @interface          SwitchItem\r\n * @property {string}  SwitchItem.id    - 选项ID(DOM下须唯一)\r\n * @property {string}  SwitchItem.name  - 选项名称\r\n * @property {string}  SwitchItem.label - 选项显示标签\r\n * @property {string}  SwitchItem.value - 选项值\r\n */\r\nexport interface SwitchItem {\r\n  id: string;\r\n  name: string;\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Select 选项定义对象\r\n * @interface          SelectOption\r\n * @property {string}  SelectOption.label - 选项显示标签\r\n * @property {string}  SelectOption.value - 选项值\r\n */\r\nexport interface SelectOption {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\n/**\r\n * WeUI 单选组件\r\n * @class                WxRadioComponent\r\n * @property {CheckItem} WxRadioComponent.item - 输入参数: 控件初始化对象\r\n * @attribute {NgModel}                        - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-cells weui-cells_radio\",\r\n  },\r\n  providers: [{\r\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WxRadioComponent),\r\n  }],\r\n  selector: \"div[wx-radio]\",\r\n  template: `\r\n    <label *ngFor=\"let option of item.options\" class=\"weui-cell weui-check__label\" [attr.for]=\"option.id\">\r\n      <div class=\"weui-cell__bd\">\r\n        <p>{{option.label}}</p>\r\n      </div>\r\n      <div class=\"weui-cell__ft\">\r\n        <input type=\"radio\" [(ngModel)]=\"value\" class=\"weui-check\" name=\"{{option.name}}\" [value]=\"option.value\" id=\"{{option.id}}\">\r\n        <span class=\"weui-icon-checked\"></span>\r\n      </div>\r\n    </label>\r\n  `,\r\n})\r\nexport class WxRadioComponent implements ControlValueAccessor {\r\n  @Input()\r\n  private item: CheckItem;\r\n  private innerValue: string = \"\";\r\n\r\n  public writeValue(val: string): void {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  private onTouchedCallback: () => void = () => { };\r\n  private onChangeCallback: (_: any) => void = () => { };\r\n\r\n  get value(): string {\r\n    return this.innerValue;\r\n  };\r\n\r\n  set value(val: string) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChangeCallback(val);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * WeUI 多选组件\r\n * @class                WxCheckboxComponent\r\n * @property {CheckItem} WxCheckboxComponent.item - 输入参数: 控件初始化对象\r\n * @attribute {NgModel}                           - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-cells weui-cells_checkbox\",\r\n  },\r\n  providers: [{\r\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WxCheckboxComponent),\r\n  }],\r\n  selector: \"div[wx-checkbox]\",\r\n  template: `\r\n    <label *ngFor=\"let option of item.options\" class=\"weui-cell weui-check__label\" [attr.for]=\"option.id\" (change)=\"doChange()\">\r\n      <div class=\"weui-cell__hd\">\r\n        <input type=\"checkbox\" class=\"weui-check\" name=\"{{item.name}}\" [value]=\"option.value\" id=\"{{option.id}}\">\r\n        <i class=\"weui-icon-checked\"></i>\r\n      </div>\r\n      <div class=\"weui-cell__bd\">\r\n        <p>{{option.label}}</p>\r\n      </div>\r\n    </label>\r\n    <input type=\"hidden\" [(ngModel)]=\"value\"/>\r\n  `,\r\n})\r\nexport class WxCheckboxComponent implements ControlValueAccessor, DoCheck {\r\n  @Input()\r\n  private item: CheckItem;\r\n  private innerValue: string = \"\";\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) { }\r\n\r\n  public ngDoCheck(): void {\r\n    let checks = this.elementRef.nativeElement.getElementsByClassName(\"weui-check\");\r\n    let preChecks = this.value.split(\",\");\r\n    for (let i = 0; i < checks.length; i ++) {\r\n      preChecks.forEach(preCheck => {\r\n        if (checks[i].value === preCheck) {\r\n          checks[i].checked = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public writeValue(val: string): void {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  private onTouchedCallback: () => void = () => { };\r\n  private onChangeCallback: (_: any) => void = () => { };\r\n\r\n  private doChange(): void {\r\n    let checks = this.elementRef.nativeElement.getElementsByClassName(\"weui-check\");\r\n    let swap: Array<string> = [];\r\n    for (let i = 0; i < checks.length; i ++) {\r\n      if (checks[i].checked) {\r\n        swap.push(checks[i].value);\r\n      }\r\n    }\r\n    this.value = swap.toString();\r\n  }\r\n\r\n  get value(): string {\r\n    return this.innerValue;\r\n  };\r\n\r\n  set value(val: string) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChangeCallback(val);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * WeUI 开关组件\r\n * @class                 WxSwitchComponent\r\n * @property {SwitchItem} WxSwitchComponent.item - 输入参数: 控件初始化对象\r\n * @attribute {NgModel}                          - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-cell weui-cell_switch\",\r\n  },\r\n  providers: [{\r\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WxSwitchComponent),\r\n  }],\r\n  selector: \"div[wx-switch]\",\r\n  template: `\r\n    <div class=\"weui-cell__bd\">{{item.label}}</div>\r\n    <div class=\"weui-cell__ft\">\r\n      <input class=\"weui-switch\" [(ngModel)]=\"value\" type=\"checkbox\" name=\"{{item.name}}\" [value]=\"item.value\" id=\"{{item.id}}\"/>\r\n    </div>\r\n  `,\r\n})\r\nexport class WxSwitchComponent implements ControlValueAccessor {\r\n  @Input()\r\n  private item: SwitchItem;\r\n  private innerValue: string = \"\";\r\n\r\n  public writeValue(val: string): void {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  private onTouchedCallback: () => void = () => { };\r\n  private onChangeCallback: (_: any) => void = () => { };\r\n\r\n  get value(): string {\r\n    return this.innerValue;\r\n  };\r\n\r\n  set value(val: string) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChangeCallback(val);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * WeUI 输入组件\r\n * @class WxInputComponent\r\n * @property {InputType} WxInputComponent.type        - 输入参数: 组件类型\r\n * @property {string}    WxInputComponent.placeholder - 输入参数: 提示语\r\n * @attribute {NgModel}                               - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-input\",\r\n  },\r\n  selector: \"input[wx-input]\",\r\n  template: ``,\r\n})\r\nexport class WxInputComponent {\r\n  @HostBinding(\"attr.type\")\r\n  @Input()\r\n  private type: InputType;\r\n  @HostBinding(\"attr.placeholder\")\r\n  @Input()\r\n  private placeholder: string;\r\n}\r\n\r\n/**\r\n * WeUI 文本域组件\r\n * @class WxTextAreaComponent\r\n * @property {string} WxTextAreaComponent.name         - 输入参数: 组件名称\r\n * @property {string} WxTextAreaComponent.placeholder  - 输入参数: 提示语\r\n * @property {number} WxTextAreaComponent.rows         - 输入参数: 行数\r\n * @property {number} WxTextAreaComponent.maxCharCount - 输入参数: 最大字数\r\n * @attribute {NgModel}                                - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-cells weui-cells_form\",\r\n  },\r\n  providers: [{\r\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WxTextAreaComponent),\r\n  }],\r\n  selector: \"div[wx-text-area]\",\r\n  template: `\r\n    <div class=\"weui-cell\" [ngClass]=\"{ 'weui-cell_warn': isWarn }\">\r\n      <div class=\"weui-cell__bd\">\r\n        <textarea class=\"weui-textarea\" [(ngModel)]=\"value\" placeholder=\"{{placeholder}}\" rows=\"{{rows}}\"></textarea>\r\n        <div class=\"weui-textarea-counter\">\r\n          <span>{{currentCharCount}}</span>/{{maxCharCount}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class WxTextAreaComponent implements ControlValueAccessor, DoCheck {\r\n  @HostBinding(\"attr.name\")\r\n  @Input()\r\n  private name: string;\r\n  @HostBinding(\"attr.placeholder\")\r\n  @Input()\r\n  private placeholder: string;\r\n  @HostBinding(\"attr.rows\")\r\n  @Input()\r\n  private rows: number;\r\n  @Input()\r\n  private maxCharCount: number;\r\n  private currentCharCount: number;\r\n  private innerValue: string = \"\";\r\n  private isWarn: boolean = false;\r\n\r\n  public writeValue(val: string): void {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  public ngDoCheck(): void {\r\n    let valueLength = this.value ? this.value.length : 0;\r\n    this.currentCharCount = valueLength;\r\n    if (valueLength > this.maxCharCount) {\r\n      this.isWarn = true;\r\n    } else {\r\n      this.isWarn = false;\r\n    }\r\n  }\r\n\r\n  private onTouchedCallback: () => void = () => { };\r\n  private onChangeCallback: (_: any) => void = () => { };\r\n\r\n  get value(): string {\r\n    return this.innerValue;\r\n  };\r\n\r\n  set value(val: string) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChangeCallback(val);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * WeUI 下拉框组件\r\n * @class WxSelectComponent\r\n * @property {string}              name    - 输入参数: 组件名称\r\n * @property {Array<SelectOption>} options - 输入参数: 控件初始化对象\r\n * @attribute {NgModel}                    - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-select\",\r\n  },\r\n  selector: \"select[wx-select]\",\r\n  template: `\r\n    <option *ngFor=\"let option of options\" [value]=\"option.value\">{{option.label}}</option>\r\n  `,\r\n})\r\nexport class WxSelectComponent {\r\n  @HostBinding(\"attr.name\")\r\n  @Input()\r\n  private name: string;\r\n  @Input()\r\n  private options: Array<SelectOption>;\r\n}\r\n\r\n/**\r\n * WeUI 协议同意组件\r\n * @class WxAgreeComponent\r\n * @property {string} WxAgreeComponent.for     - 输入参数: 组件ID\r\n * @property {string} WxAgreeComponent.declare - 输入参数: 声明词\r\n * @property {string} WxAgreeComponent.title   - 输入参数: 协议名称\r\n * @property {string} WxAgreeComponent.url     - 输入参数: 协议文本地址\r\n * @attribute {NgModel}                        - 输入输出变量: 绑定的对象变量\r\n */\r\n@Component({\r\n  host: {\r\n    \"class\": \"weui-agree\",\r\n  },\r\n  providers: [{\r\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WxAgreeComponent),\r\n  }],\r\n  selector: \"label[wx-agree]\",\r\n  template: `\r\n    <input id=\"{{for}}\" [(ngModel)]=\"value\" type=\"checkbox\" class=\"weui-agree__checkbox\">\r\n    <span class=\"weui-agree__text\">\r\n      {{declare}}<a style=\"cursor: pointer;\" href=\"{{url}}\" target=\"_blank\">{{title}}</a>\r\n    </span>\r\n  `,\r\n})\r\nexport class WxAgreeComponent implements ControlValueAccessor {\r\n  @HostBinding(\"attr.for\")\r\n  @Input()\r\n  private for: string;\r\n  @Input()\r\n  private declare: string;\r\n  @Input()\r\n  private title: string;\r\n  @Input()\r\n  private url: string;\r\n  private innerValue: string = \"\";\r\n\r\n  public writeValue(val: string): void {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  private onTouchedCallback: () => void = () => { };\r\n  private onChangeCallback: (_: any) => void = () => { };\r\n\r\n  get value(): string {\r\n    return this.innerValue;\r\n  };\r\n\r\n  set value(val: string) {\r\n    if (val !== this.innerValue) {\r\n      this.innerValue = val;\r\n      this.onChangeCallback(val);\r\n    }\r\n  }\r\n}\r\n"]}