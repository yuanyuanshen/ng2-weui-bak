{"version":3,"sources":["../../src/app/component/form/slider.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAkF;AAElF;;;GAGG;AAUH,IAAa,oBAAoB;IAAjC;IAAoC,CAAC;IAAD,2BAAC;AAAD,CAApC,AAAqC,IAAA;AAAxB,oBAAoB;IAThC,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,iBAAiB;SAC3B;QACD,QAAQ,EAAE,oBAAoB;QAC9B,QAAQ,EAAE,kFAET;KACF,CAAC;GACW,oBAAoB,CAAI;AAAxB,oDAAoB;AAEjC;;;GAGG;AAUH,IAAa,yBAAyB;IAAtC;IAAyC,CAAC;IAAD,gCAAC;AAAD,CAAzC,AAA0C,IAAA;AAA7B,yBAAyB;IATrC,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,wBAAwB;SAClC;QACD,QAAQ,EAAE,0BAA0B;QACpC,QAAQ,EAAE,qCAET;KACF,CAAC;GACW,yBAAyB,CAAI;AAA7B,8DAAyB;AAEtC;;;;;GAKG;AAaH,IAAa,iBAAiB;IAZ9B;QAkBU,gBAAW,GAAyB,IAAI,mBAAY,EAAE,CAAC;QACvD,QAAG,GAAW,CAAC,CAAC;QAChB,WAAM,GAAW,CAAC,CAAC;QACnB,cAAS,GAAW,CAAC,CAAC;IAsBhC,CAAC;IApBQ,uCAAW,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1F,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACzC,CAAC;IACH,CAAC;IAEM,kCAAM,GAAb,UAAc,KAAU;QACtB,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;QACnD,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1E,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC;QACxD,IAAI,CAAC,GAAG,GAAI,IAAI,GAAG,QAAQ,GAAG,GAAG,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC;QACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEM,mCAAO,GAAd,UAAe,KAAU;QACvB,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAChD,CAAC;IACH,wBAAC;AAAD,CA/BA,AA+BC,IAAA;AA7BC;IADC,YAAK,EAAE;;8CACY;AAEpB;IADC,YAAK,EAAE;;gDACc;AAEtB;IADC,aAAM,EAAE;8BACY,mBAAY;sDAA8B;AANpD,iBAAiB;IAZ7B,gBAAS,CAAC;QACT,IAAI,EAAE;YACJ,OAAO,EAAE,aAAa;SACvB;QACD,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE,iSAKT;KACF,CAAC;GACW,iBAAiB,CA+B7B;AA/BY,8CAAiB","file":"slider.component.js","sourcesContent":["import { Component, Input, Output, OnChanges, EventEmitter } from \"@angular/core\";\n\n/**\n * WeUI 滑块容器组件\n * @class WxSliderBoxComponent\n */\n@Component({\n  host: {\n    \"class\": \"weui-slider-box\",\n  },\n  selector: \"div[wx-slider-box]\",\n  template: `\n    <ng-content select=\"[wx-slider],[wx-slider-box-value]\"></ng-content>\n  `,\n})\nexport class WxSliderBoxComponent { }\n\n/**\n * WeUI 滑块值标签组件\n * @class WxSliderBoxValueComponent\n */\n@Component({\n  host: {\n    \"class\": \"weui-slider-box__value\",\n  },\n  selector: \"div[wx-slider-box-value]\",\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class WxSliderBoxValueComponent { }\n\n/**\n * WeUI 滑块组件\n * @class             WxSliderComponent\n * @property {number} WxSliderComponent.max   - 输入参数: 最大值\n * @property {number} WxSliderComponent.value - 输入输出参数: 当前值\n */\n@Component({\n  host: {\n    \"class\": \"weui-slider\",\n  },\n  selector: \"div[wx-slider]\",\n  template: `\n    <div class=\"weui-slider__inner\">\n      <div [ngStyle]=\"{ 'width': pax+'%' }\" class=\"weui-slider__track\"></div>\n      <div [ngStyle]=\"{ 'left': pax+'%' }\" class=\"weui-slider__handler\" (touchmove)=\"doMove($event)\" (touchstart)=\"doStart($event)\"></div>\n    </div>\n  `,\n})\nexport class WxSliderComponent implements OnChanges {\n  @Input()\n  private max: number;\n  @Input()\n  private value: number;\n  @Output()\n  private valueChange: EventEmitter<number> = new EventEmitter();\n  private pax: number = 0;\n  private startX: number = 0;\n  private startLeft: number = 0;\n\n  public ngOnChanges(): void {\n    if (this.value !== undefined && this.max !== undefined && this.max > 0 && this.value >= 0) {\n      this.pax = this.value / this.max * 100;\n    }\n  }\n\n  public doMove(event: any): void {\n    let totalLen = event.target.parentNode.offsetWidth;\n    let dist = this.startLeft + event.changedTouches[0].clientX - this.startX;\n    dist = dist < 0 ? 0 : dist > totalLen ? totalLen : dist;\n    this.pax =  dist / totalLen * 100;\n    this.value = dist / totalLen * this.max;\n    this.valueChange.emit(this.value);\n  }\n\n  public doStart(event: any): void {\n    let totalLen = event.target.parentNode.offsetWidth;\n    this.startLeft = this.pax * totalLen / 100;\n    this.startX = event.changedTouches[0].clientX;\n  }\n}\n"]}